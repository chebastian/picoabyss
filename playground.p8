pico-8 cartridge // http://www.pico-8.com
version 41
__lua__
-- rouge
function _init()
 _st_upd = {}
 _dbg = {}
	_wnd = {}
	srand(1337)
	_px,_py = 0,0
	_drw_dbg = true
	_upd = upd_game
	_drw = drw_game
	push_upd(upd_game)
	buttons = {⬅️,➡️,⬆️,⬇️}
	dirs = {p(-1,0),
								 p(0,-1),
								 p(1,0),
								 p(0,1)
								}
								
	dir8 = {p(-1,0),p(0,-1),
									p(1,0),	p(0,1),
									
									p(-1,-1), p(1,-1),
								 p(1,1),p(-1,1)}
	
	sig_left  = 0b01111111
	sig_up    = 0b10111111
	sig_right = 0b11011111
	sig_down  = 0b11101111
	msk_diag  = 0b00001111
	msk_card  = 0b11110000
	
	sig_dir = {
	0b11111111,
	0b01110110, -- left
	0b10110011, -- up
	0b11011001, -- right
	0b11101100, -- down
	}
	
	sig_msk = {
	0b00000000,
	0b00001001,
	0b00001100,
	0b00000110,
	0b00000011,
	}
	
	
	sig_dirs = {
	sig_dwn,
	sig_right,
	sig_up,
	sig_left}
	
-- _rcts = {}
 _ps = {}
 _iterations = 3
 _size = 20
 _camx,_camy = 0,0
 _gen_rct= {}
 srcx = _size-1
	srcy = _size-1
-- gen()
 
 _curx,_cury=0,0
--	find()

	-- generation constants
	fr = true
	_cam_mode = false
	ox = 10
	oy = 10
	sig_dig = 255
	t_dig = 36
	t_ndig = 1
	
	gen()
end


function find()
 _path = path_between(
 								p(1,1),p(srcx,srcy),{})
	_dbg[3] = #_path
	_dj_map = arr_to_tbl(_path)
 _golden_path = go_to_o(_dj_map,p(srcx,srcy),{})
end

function dbg(str)
 add(_dbg,str)
end

function drw_rct(r,c)
	local x,y,w,h = r.x,r.y,r.w,r.h
 if fr then
  rectfill(ox+x,oy+y,
 									ox+x+w,oy+y+h,c)
 else
  rect(ox+x,oy+y,
 									ox+x+w,oy+y+h,c)
 end
end

function drw_rcts(rs)
	local cs = {1,2,3,4,5,6,7,8,9,10,11,12,13,14}
	local c = 0
	for r in all(rs) do
		c+=1
		c%=max(1,#cs)
	 drw_rct(r,cs[c])
	end
end

function update_digables()
	_digable = {}
	mapsig(function(x,y,sig)
								 if sig == sig_dig then
											mset(x,y,t_dig)
											add(_digable,{x=x,y=y})
									end								
								end)
end

function is_carvable(a)
	for i=1,#sig_dir do
	 if sig_match(a,sig_dir[i],sig_msk[i]) then
	 	return true
	 end
	end
	return false
end

function dig(po)
	printh("digging: " .. po.x ..":"..po.y)
 local px,py,dx,dy = po.x,po.y,0,1
	mset(px,py,0)
	local nextdig = {}
	for dr in all(dirs) do
		if not chk_solid(po) and is_carvable(tile_sig(add_t(po,dr))) then
			add(nextdig,add_t(po,dr))
		end
	end	
	
--	printh("c:"..#nextdig)
	return nextdig
end

function dig_tunnel()
--	local pt = arr_choose(_digable)
-- local ndig = dig(pt)
-- local keepdigging = _ndig > 0
 local start = arr_choose(_digable)
 local ndig = dig(start)
 local keepdigging = #ndig > 0

-- printh("alts: ".. #ndig .. " nxt: "..tostr(pt))
-- stop()
--	_curx=pt.x*8
--	_cury=pt.y*8

	local dug = {}
 while keepdigging do
		local pdig = arr_choose(ndig)
		if dug[ptoi(pdig)] then
			printh("hello")
			stop()
			break
		end
		dug[ptoi(pdig)] = true
 	ndig = dig(pdig)
 	printh("alts: ".. #ndig .. " nxt: "..tostr(pt))
  printh("sig: " ..tile_sig(pdig) .. "solid: " .. tostr(chk_solid(pdig)))
 	_curx=pdig.x*8
 	_cury=pdig.y*8
 	keepdigging = #ndig > 0 	
 end
end

function gen()
	reload(0x1000, 0x1000, 0x2000)
 fill_map(1)
 _gen_rct = regen(_iterations,_size)	
 _room_idx = 0
 foreach(_gen_rct,map_rct_rnd)


-- set tiles digable when
-- sourounded by walls
	

	set_digable_start()
	
	update_digables()
	while #_digable>1 do
		local st = dig_tunnel()
		update_digables()
		printh(#_digable..": diggables")
		stop()
	end

	printh("⬇️🅾️♪░")
	stop()
	
--		update_digables()		
--	end
--	local pt = _digable[flr(rnd(#_digable))]
-- local ndig = dig(pt)
-- local keepdigging = #ndig > 0
--
-- while keepdigging do
--		local pdig = arr_choose(ndig)
-- 	ndig = dig(pdig)
-- 	_curx=pdig.x*8
-- 	_cury=pdig.y*8
-- 	keepdigging = #ndig > 0 	
-- end
-- 
 set_digable_start()
end

function rnd_int(n)
	return flr(rnd()*n)
end

function rnd_idx(n)
	return rnd_int(n)+1
end

function arr_choose(myarr)
	local mri = rnd_idx(#myarr)
	return myarr[mri]
end

function set_digable_start()
	mapsig(function(x,y,sig)
								 if chk_solid(p(x,y)) then
									 if is_digable(sig) then
									 	mset(x,y,t_dig)
									 	add(digs,p(x,y))
									 else
									 	mset(x,y,t_ndig)
									 end
								 end
							end)
end

function sig_match(a,b,mask)
	return bor(a,mask) == bor(b,mask)
end

function is_digable(a)
 if sig_match(a,255) then
 	return true
 end
	return false
end

function sig_matchx(a,b,masks)
	for msk in all(masks) do
		if sig_match(a,b,msk) then
			return true
		end
	end
	
	return false
end

sig_dwn  = 255-2
sig_right= 255-8
sig_up   = 255-32
sig_left = 255-128


function mapt(func)
	for y=0,_size do
		for x=0,_size do
			func(x,y,mget(x,y))
		end
	end
end

function mapsig(func)
	for y=0,_size do
		for x=0,_size do
			func(x,y,tile_sig(p(x,y)))
		end
	end
end

function set_if(wh,to,x,y,sig)
	
end

function upd_cursor()
 local dx,dy=0,0
 
 if btnp(⬆️) then
  dy=-1
 elseif btnp(⬇️) then
  dy=1
	end
	
	if btnp(⬅️) then
  dx=-1
	elseif btnp(➡️) then
  dx = 1
 end
 
 _curx+=dx*8
 _cury+=dy*8
end

_modes = {"cam","mov","gen"}
_mode = 1

function mode()
 return _modes[_mode]
end

function log(st,y)
 _dbg[y] = st
end
 
function _draw()
	cls()
 map()
 camera(_camx,_camy)
 
-- drw_rcts(_gen_rct)
 
 for po in all(_ps) do
  pset(ox+po.x,oy+po.y,16)
 end
 
 if btn(🅾️) then
  if btnp(⬆️) then
  _mode -= 1
  elseif btnp(⬇️) then
  _mode += 1
  end
  
 _mode = max(1,_mode%(#_modes+1))
 elseif mode() == "cam" then
  local camsp = 1
 	if btn(⬆️) then
	  _camy -= camsp
	 elseif btn(⬇️) then
	  _camy += camsp
	 end
	 if btn(⬅️) then
		 _camx -= camsp
		elseif btn(➡️) then
			_camx += camsp
	 end
 elseif mode() == "gen" then
	 if btnp(⬆️) then
	  _iterations += 1
	 elseif btnp(⬇️) then
	  _iterations -= 1
		elseif btnp(⬅️) then
		 _size -= 1
		elseif btnp(➡️) then
			_size += 1
	 end
	elseif mode() == "mov" then
	 upd_cursor()
 end
 
 srcx,srcy=_size-1,_size-1
 

 if mode() != "mov" and btnp(❎) then
 	gen()
 elseif mode() == "move" and btnp(❎) then
 end
 
 
 -- draw dijkstramap
-- for tl in all(_path) do
--  print(tl.dst,
--  					2+tl.po.x*8,2+tl.po.y*8,
--  					1)
-- end
 -- draw goal
 print("★",srcx*8,srcy*8,9)
 
 -- draw best path
 local px,py = srcx,srcy
-- local pth = go_to_o(_dj_map,p(px,py),{})
 for pt in all(_golden_path) do
  print_t("웃",pt.x,pt.y)
 end
 
 palt(14,true)
 spr(49,_curx,_cury)
 
 drw_hud()
end

function drw_hud()
camera(0,0)

	log("" .. mode(),1)
 if _drw_dbg then
	 cursor(0,20)
	 for i=1,10 do
	  print(_dbg[i],8)
	 end
 end
camera(_camx,_camy)
end

function print_t(c,x,y)
 print(c,2+x*8,2+y*8,2)
end

function _update60()
--	_upd()
end

function push_upd(upd)
 add(_st_upd,upd)
end

function pop_upd()
 del(_st_upd,_st_upd[#_st_upd])
end


-->8
-- generate

function add_door(r,hr,existing)
 local ranx = rnd()
 local np = {}
 if not hr then
     np =
         p(in_rng(r.x+flr(ranx*r.w),r.x+1,r.x+r.w-1),
     									r.y+r.h)
    else
      np = p(r.x+r.w,
           in_rng(r.y+flr(ranx*r.h),
                  r.y+1,r.y+r.h-1))
    end
 existing[ptoi(np)] = np
end

function regen(iter,sz)
  local w,h = sz,sz
  local rc = rct(0,0,w,h)
  local iters = iter
  local rs = {rc}	
  local cnt = 0
  _ps = {}
  while iters > 0 do
  	local nxt = {}
	  for ir in all(rs) do
    local valid = false
    local retry = 10
    local nl,nr = {},{}
    while(not valid) do
	    nl,nr,hr = spl_rct(ir,hr)
	    if not hr then
	     local a,b = p(nl.x,nl.y+nl.h),
	                 p(nl.x+nl.w,nl.y+nl.h)
	     valid = _ps[ptoi(a)] == nil and _ps[ptoi(b)] == nil
	    else
	      local a,b = p(nl.x+nl.w,nl.y),
	                 p(nl.x+nl.w,nl.y+nl.h)
	     valid = _ps[ptoi(a)] == nil and _ps[ptoi(b)] == nil
	    end
	    retry -= 1
	    if retry < 0 then
	     break
	    end
    end
    cnt += 1
    add_door(nl,hr,_ps)
    add(nxt,nl)
    add(nxt,nr)
   end
   
   rs = {}
   for n in all(nxt) do
   	add(rs,n)
   end
   iters-=1
  end
  
  return rs
end

-- utils

function in_rng(n,_min,_max)
 return min(_max,max(_min,n))
end

-- rect

function rct(x,y,w,h)
 return {x=x,y=y,w=w,h=h}
end

function spl_rct(r,hor)
	local x,y,w,h = r.x,r.y,r.w,r.h
 
 local sp = in_rng(rnd(),.34,.66)
 local nw,nh = flr(w*sp),
 														flr(h*sp)
 if w>h then
  return rct(x,y,nw,h),
  							rct(x+nw,y,w-nw,h),true
 else
  return rct(x,y,w,nh),
  							rct(x,y+nh,
  							w,h-nh),false
 end
end

function rnd_rng(_min,_max)
 local r = max(_min,ceil(rnd()*_max))
 return min(r,_max)
end 

function fill_map(t)
	for y=0,_size do
 	for x=0,_size do
   mset(x,y,t)
 	end
 end
end

function map_rct_rnd(r)
-- ★ hack to never gen rooms of size 1
 local nw =	rnd_rng(r.w/2,r.w)
 local nh =	rnd_rng(r.h/2,r.h)
 local nx = r.x
 local x,y,w,h = nx,r.y,
 																nw,nh
 local idx = 1
 local flrid = 2+_room_idx
 for i=0,w,1 do
  mset(x+i,y,idx)
  mset(x+i,y+h,idx)
 end
 
 for i=0,h,1 do
  mset(x,y+i,idx)
  mset(x+w,y+i,idx)
  if i != 0 and i != h then
	  for mx=1,w-1,1 do
	  	mset(x+mx,y+i,flrid)
	  end
  end

 end
 
 _room_idx+=1
 _room_idx%=5
end

-- map things to tilemap
function map_rct(r)
 local x,y,w,h = r.x,r.y,r.w,r.h
 local idx = 1
 local flrid = 2+_room_idx
 for i=0,w,1 do
  mset(x+i,y,idx)
  mset(x+i,y+h,idx)
 end
 
 for i=0,h,1 do
  mset(x,y+i,idx)
  mset(x+w,y+i,idx)
  if i != 0 and i != h then
	  for mx=1,w-1,1 do
	  	mset(x+mx,y+i,flrid)
	  end
  end

 end
 
 _room_idx+=1
 _room_idx%=5
end

function mset_ig(x,y,t,ig)
 if not ig or not chk_flg(p(x,y),ig) then
  mset(x,y,t)
 end
end

function map_doors()
 for k,v in pairs(_ps) do
  mset(v.x,v.y,0)
 end
end
function re_map_doors()
 for k,v in pairs(_ps) do
  mset(v.x,v.y,9)
 end
end
-->8
-- utils

-- types
function p(x,y)
	return {x=x,y=y}
end

function ptoi(po)
 return po.y*400+po.x
end

function vec_right(x,y)
 return y*-1,x	
end

function vec_reflect(x,y)
	return -x,-y
end

-- functions
function dist(a,b)
 local abx,aby = a.x-b.x, a.y-b.y
 return sqrt(abx*abx+aby*aby)
end

function p_len(a)
 return dist(a,p(0,0))
end

function is_player(ent)
 return ent.id == _pid
end

function arr_select(arr,sel)
 local res = {}
 for it in all(arr) do
  add(res,sel(it))
 end
 return res
end

-- projections
function ent_to_idx(ent)
 return ptoi(ent.pos)
end

--function arr_cont(arr,a,cmp)
-- return arr_find(arr,a,cmp) != nil
--end
--
--function arr_find(arr,a,cmp)
-- for it in all(arr) do
--  if cmp(a,it) then
--   return it
--  end
-- end
-- return nil
--end

function lerp(a,b,d)
	if(d >= 1.0) return b
 return a+(b-a)*d
end

function add_t(po,d)
 return p(po.x+d.x,po.y+d.y)
end

function move_t(po,d)
 po.x += d.x
 po.y += d.y
end

function next_d()
 return dirs[flr(rnd(4))+1]
end

function next_p(_p)
 local d = next_d()
 return p(_p.x+d.x,_p.y+d.y),d
end

function p_sfx(id,ent)
 if(is_player(ent)) sfx(id)
end

-- animations
function anim(f,fps,loop)
 return {f=f,fps=fps,loop=loop}
end

function anim_pl(fps)
 return
 {
  fps=fps,
  frame_cnt=0,
  frame_i=1,
 }
end

function upd_anim(pl,anim)
 if(pl.frame_cnt >= 60/pl.fps) then
  pl.frame_i+=1
  pl.frame_cnt=0
 end
 
 return anim.f[pl.frame_i%#anim.f+1]
end

function cmp_p(a,b)
 return a.x == b.po.x and a.y == b.po.y
end

function chk_solid(po)
	local til = mget(po.x,po.y)
	return fget(til,0)
end

function arr_to_tbl(arr)
 local tbl = {}
 for ti in all(arr) do
  tbl[ptoi(ti.po)] = ti.dst
 end
 return tbl
end

function go_to_o(lookup,pos,ocp)
 local cp,cd = min_d_on_map(lookup,pos,ocp)
 if not cp then
  return
 end
 local path = {p(pos.x+cp.x,pos.y+cp.y)}
 local nxtp = path[1]
 while cd > 0 do
 	cp,cd = min_d_on_map(lookup,nxtp,ocp)
 	local np = p(nxtp.x+cp.x,nxtp.y+cp.y)
 	add(path,p(np.x,np.y))
 	nxtp = np
 end
 
 return path
end

function min_d_on_map(lookup,pos,ocp)
-- local lookup = arr_to_tbl(nodes)
 local mini,mind = -1,999
 local curd = lookup[ptoi(pos)]
 
 -- if we are on map our min is our current dist
 if curd then
  mind = curd
 end
 
 for i=1,#dirs do
  local nx = pos.x+dirs[i].x
  local ny = pos.y+dirs[i].y
  
  local ndist = 999
  local look_d = lookup[ptoi(p(nx,ny))]
  -- if lookd_d is on path  
  -- and aint occupied
  -- and is new low
  if look_d 
  and ocp[ptoi(p(nx,ny))] == nil
  and look_d < mind
  then
			mini = i
			mind = look_d
  end
 end
 
 if mini == -1 then
  return
 end
 
 return dirs[mini],mind
end

function path_between(_a,_b,ocp)
	local dpth,queue,visited = 0,{},{}
 visited[ptoi(_a)] = true
 local nxt = {{po=_a,dst=0}}
 local found = {{po=_a,dst=0}}
 local goal_rch = false
 while not goal_rch do
 	dpth+=1
 	_dbg[2] = "t:"..dpth
		 _dbg[4] = "nxt: "..#nxt
	 for ite in all(nxt) do
	 	
		 for d in all(dirs) do
		 	local nxtp= ite.po
		  local np = p(nxtp.x+d.x
		  											,nxtp.y+d.y)
		  local pi = ptoi(np)
		  if(chk_solid(np) == false
					  and ocp[pi] == nil
					  and visited[pi] == nil)
		  then
		   visited[ptoi(np)] = true
		   add(queue,{po=p(np.x,np.y),dst=dpth})
		  end
		 end
	 end
	 
	 nxt = {}
	 for q in all(queue) do
	  add(nxt,
	  {po=p(q.po.x,q.po.y),
	   dst=q.dst})
	  add(found,
	   {po=p(q.po.x,q.po.y),
	    dst=q.dst})
	  if (q.po.x == _b.x 
	  and q.po.y == _b.y) then
	  	_dbg[5] = "✽ound" .. #found
	   return found
	  end
	 end
	 	 
	 if #queue == 0 then
	  _dbg[5] = "not found"

	  return found
	 end
	 
	 queue = {}

 end
 return found
end

function flood_fill(po,nxt,ocp)
 local dpth,queue,visited = 0,{},{}
 visited[ptoi(_plyr.pos)] = true
 
 local found = {nxt[1]}
 while dpth <= 7 do
 	dpth+=1
	 for ite in all(nxt) do
		 for d in all(dirs) do
		  local it = ite.po
		  local np = p(it.x+d.x,it.y+d.y)
		  local pi = ptoi(np)
		  if(chk_solid(np) == false
					  and ocp[pi] == nil
					  and visited[pi] == nil)
		  then
		   visited[ptoi(np)] = true
		   add(queue,{po=p(np.x,np.y),dst=dpth})
		  end
		 end
	 end
	 
	 nxt = {}
	 for q in all(queue) do
	  add(nxt,
	  {po=p(q.po.x,q.po.y),
	   dst=q.dst})
	  add(found,
	   {po=p(q.po.x,q.po.y),
	    dst=q.dst})
	 end
	 	 
	 if #queue == 0 then
	  return found
	 end
	 
	 queue = {}

 end
 
 return found
end

function myline(x1,y1,x2,y2)
 local dx,dy = abs(x2-x1),
 													 abs(y2 - y1)
 local signx,signy = 1,1
 local derr = dx*0.5
 local px,py = x1,y1
 if( dy > dx)  derr = -dy * 0.5
 
 if( x2 < x1 ) signx = -1 
 if (y2 < y1)  signy = -1

 
 local points = {
 }
 while true do
 	add(points,{x=px,y=py})
 	
 	if px == x2 and py == y2 then
 	  return points
 	end
 	
 	if derr > -dx then
 		derr -= dy
 		px += signx
 	end
 	
 	-- check again, what happens without
 	if px == x2 and py == y2 then
   	add(points,{x=px,y=py})
 	  return points
 	end
	
	 if derr < dy then
	  derr += dx
	  py += signy
	 end
		
 		-- check again, what happens without
 	if px == x2 and py == y2 then
	  	add(points,{x=px,y=py})
 	  return points
 	end
 end
 
 
end

function tile_sig(po)
 local sig = 0
 for i=1,8 do
  local d = dir8[i]
  if chk_solid(add_t(po,d)) then
   sig += 1
  end
  if(i < 8) then
  	sig = shl(sig,1)
  end
 end
 return sig
end
-->8
-- automata
function chk_flg(po,f)
	local til = mget(po.x,po.y)
	return fget(til,f)
end

function next_gen(sz,rn)
 for y=0,sz do
 	for x=0,sz do
   local cnt = 0
   if chk_flg(p(x,y),_dirt_f) then
    cnt+=1
   end
   for d in all(dir8) do
    if chk_flg(p(x+d.x,y+d.y),_dirt_f) then
     cnt+=1
    end
   end
   
   if cnt < 4 then
    mset(x,y,0)
   elseif cnt >= 4 then
   	mset(x,y,_dirt)
   end
  end
 end
end

_dirt=35
_dirt_f=7
function noize(sz,r)
 for y=0,sz do
 	for x=0,sz do
   if rnd(100) <= r then
--   	mset(x,y,0)
   else
    mset(x,y,_dirt)
   end
  end
 end
end
-->8
-- tile rules

-- 0, wall
--    l: 0,1,2,3,5,6
--    r: 0,1,2,3,5,6
--    d: 0,1,2,3,5,6
--    u: 0,1,2,3,5,6
-- 1, floor
--    l: 0,1,2,3,4,5,6
--    r: 0,1,2,3,4,5,6
--    u: 0,1,2,3,4,5,6
--    d: 0,1,2,3,4,5,6
-- 2, door
--    l:0
--    r:0
--    u:0,5
--    d:0,5
-- 3, sand
-- 4, chest
-- 5, pot
-- 6, enemy
__gfx__
000000001111111190000000a000000060000000c0000000e0000000000000000055550000888800000000000000000000000000000000000000000000000000
00000000111111110000000000000000000000000000000000000000000000000550055008800880000000000000000000000000000000000000000000000000
007007001111111190000000a000000060000000c0000000e0000000000000005500005588000088000000000888888000000000088888800000000000000000
00077000111111110000000000000000000000000000000000000000000000005000000580088008055555508888888800000000008888000000000008888880
000770001111111190000000a000000060000000c0000000e0000000000000005000000580888808550000558880088805550550088088800550000008888808
00700700111111110000000000000000000000000000000000000000000000005000000580088808500000050000000055000055880888885550000508888088
000000001111111190000000a000000060000000c0000000e0000000000000005000000580888808555005558880088800055050088088800000500000880880
0000000011111111090909090a0a0a0a060606060c0c0c0c0e0e0e0e000000000000000000000000555555558888888800055000000880000005500000088800
00000000550055050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800008000000000000000000000000000000000
00000000505505500000000000000000000000000000000000000000000000000000000000000000000000000888888000000000088888800000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000008800005555550888888880000000000eeee000000000000000000
00000000000000000000000000000000000000000000600000000000000000000000000000088000550000558880088800000000088088800000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000008888000500000050000000000000000880888880000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000008888000555005558880088800000000088088800000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000008008000555555558888888800000000000880000000000000000000
000000000000000066606660ffffffff1ddddddd5000500000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000005555555000000060f0ffff00dddddddd0505050500000000000000000000000000000000000000000000000000000000000000000000000000000000
000000005555555060666060ffffffff1ddddddd0050005000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000005555555000000000ff00ffffdddddddd0505050500000000000000000000000000000000000000000000000000000000000000000000000000000000
000000005555555066606060ffffffff1ddddddd5000500000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000005555555000000000ffffff0fdddddddd0505050500000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000555555506666066000ffffff1ddddddd5050005000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000ffff0ff0d1d1d1d10005050000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000088eeee880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000008eeeeee80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000eeeeeeee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000eeeeeeee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000eeeeeeee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000eeeeeeee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000008eeeeee80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000088eeee880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eeee9eeeeeee9eeeeeee9eeeeeee9eee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eee909eeeee909eeeee909eeeee909ee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
e990009ee990009ee990009ee990009e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
9bbbb9ee9cccc9ee988889ee9aaaa9ee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
9bbb9eee9ccc9eee98889eee9aaa9eee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
e9bb9eeee9cc9eeee9889eeee9aa9eee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ee99eeeeee99eeeeee99eeeeee99eeee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eeeeeeeeeeeeeeeeeeeeee99eeeee999000000090000909900009099000990990000000000000090000000900000009000090000900009990000000000000000
eeeee99eeeeee99eeeeee999eeee9999000009000000090900009909009099090000090000000990000009900000009000999000090990090000000000000000
eeee999eeeee999eeeee999ee9e99999000009900000099000090990000009900000990000009990000099900000099009999900009000900000000000000000
eee999eee9e999eee9e999eee999999e000090000000900900009099000090990909090000090900090999000900999000990990090900900000000000000000
e9ee9eeee9999eeeee999eeeee9999ee000900000009000000090900000900090990900009909000009990000099990000099999090099000000000000000000
ee9eeeeeee99eeeeeee9eeeeeee99eee009000000090000000900000009000900099000000990000000900000009000000909990900090090000000000000000
e9e9eeeee9e99eeee9ee9eeee9ee99ee090000000900000009000000090000000909900009090000090090000900900009000900909900900000000000000000
eeeeeeee9eeeeeee9eeeeeee9eeeeeee900000009000000090000000900000009000000090000000900000009000000090000000990009090000000000000000
eeeeeeeeeee9eeeeee99eeeeeeee9eee000999090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eee9eeeeeee99eeeeee99eeeeee9999e009999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eeee9eeeeeee99eee9ee99eeee99999e099009990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ee9ee9eeee9ee99e999ee99ee9ee9999090090990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
e999ee9ee999ee999999ee99eeeee99e900900990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
e9999eeee9999eee99999ee9eeeee9ee000009900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
e999eeeee999eeee999999eeeeee9eee000099000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eeeeeeeeeeeeeeee99999eeeeeeeeeee000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
51515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
50505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505000000000000000000000
__label__
00000000000000000000000000000000000000000000000000000000000000555555550000000000000000000000005555555500000000000000000000000055
88000000880000008800000088000000880000008800000088000000880000555555550008880000088800000888005555555500888000008880000088800055
00800000008000000080000000800000008000000080000000800000008000555555550008000000080000000800005555555500008000000080000000800055
08000000080000000800000008000000080000000800000008000000080000555555550000800000008000000080005555555500888000008880000088800055
00800000008000000080000000800000008000000080000000800000008000555555550000080000000800000008005555555500800000008000000080000055
88000000880000008800000088000000880000008800000088000000880000555555550008800000088000000880005555555500888000008880000088800055
0000066000000660000006600000066000000660000006600000066000000655555555e000000ee000000ee000000e5555555540000004400000044000000455
00000660000006600000066000000660000006600000066000000660000006555555555555555555555555555555555555555555555555000000005555555555
00000000000000000000000000000000000000000000000000000000000000555555555555555555555555555555555555555555555555000000005555555555
88000000880000008800000088000000880000008800000088000000880000555555555555555555555555555555555555555555555555000000005555555555
00800000008000000080000000800000008000000080000000800000008000555555555555555555555555555555555555555555555555000000005555555555
08000000080000000800000008000000080000000800000008000000080000555555555555555555555555555555555555555555555555000000005555555555
00800000008000000080000000800000008000000080000000800000008000555555555555555555555555555555555555555555555555000000005555555555
88000000880000008800000088000000880000008800000088000000880000555555555555555555555555555555555555555555555555000000005555555555
00000660000006600000066000000660000006600000066000000660000006555555555555555555555555555555555555555555555555000000005555555555
00000660000006600000066000000660000006600000066000000660000006555555556000000600000000e000000ee000000ee000000ee000000ee000000e55
00000000000000000000000000000000000000000000000000000000000000555555550000000000000000000000000000000000000000000000000000000055
88000000880000008800000088000000880000008800000088000000880000555555550088000000000000000888000008880000088800000888000008880055
00800000008000000080000000800000008000000080000000800000008000555555550000800000000000000800000008000000080000000800000008000055
08000000080000000800000008000000080000000800000008000000080000555555550008000000000000000080000000800000008000000080000000800055
00800000008000000080000000800000008000000080000000800000008000555555550000800000000000000008000000080000000800000008000000080055
88000000880000008800000088000000880000008800000088000000880000555555550088000000000000000880000008800000088000000880000008800055
00000660000006600000066000000660000006600000066000000660000006555555556000000600000000e000000ee000000ee000000ee000000ee000000e55
55555555555555000000005555555555555555555555555555555555555555555555556000000655555555e000000ee000000ee000000ee000000ee000000e55
55555555555555000000005555555555555555555555555555555555555555555555550000000055555555000000000000000000000000000000000000000055
55555555555555000000005555555555555555555555555555555555555555555555550088000055555555000888000008880000088800000888000008880055
55555555555555000000005555555555555555555555555555555555555555555555550000800055555555000800000008000000080000000800000008000055
55555555555555000000005555555555555555555555555555555555555555555555550008000055555555000080000000800000008000000080000000800055
55555555555555000000005555555555555555555555555555555555555555555555550000800055555555000008000000080000000800000008000000080055
55555555555555000000005555555555555555555555555555555555555555555555550088000055555555000880000008800000088000000880000008800055
55555555555555000000005555555555555555555555555555555555555555555555556000000655555555e000000ee000000ee000000ee000000ee000000e55
00000cc000000cc000000cc000000cc000000cc000000cc000000cc000000c555555556000000655555555e000000ee000000ee000000ee000000ee000000e55
00000000000000000000000000000000000000000000000000000000000000555555550000000055555555000000000000000000000000000000000000000055
08000008080000080800000808000008080000080800000808000008080000555555550088000055555555000888000008880000088800000888000008880055
88000008880000088800000888000008880000088800000888000008880000555555550000800055555555000800000008000000080000000800000008000055
08000000080000000800000008000000080000000800000008000000080000555555550008000055555555000080000000800000008000000080000000800055
08000000080000000800000008000000080000000800000008000000080000555555550000800055555555000008000000080000000800000008000000080055
00000000000000000000000000000000000000000000000000000000000000555555550088000055555555000880000008800000088000000880000008800055
00000cc000000cc000000cc000000cc000000cc000000cc000000cc000000c555555556000000655555555e000000ee000000ee000000ee000000ee000000e55
00000cc000000cc000000cc000000cc000000cc000000cc000000cc000000c555555556000000655555555e000000ee000000ee000000ee000000ee000000e55
00000000000000000000000000000000000000000000000000000000000000555555550000000055555555000000000000000000000000000000000000000055
08000008080000080800000808000008080000080800000808000008080000555555550088000055555555000888000008880000088800000888000008880055
88000008880000088800000888000008880000088800000888000008880000555555550000800055555555000800000008000000080000000800000008000055
08000000080000000800000008000000080000000800000008000000080000555555550008000055555555000080000000800000008000000080000000800055
08000000080000000800000008000000080000000800000008000000080000555555550000800055555555000008000000080000000800000008000000080055
00000000000000000000000000000000000000000000000000000000000000555555550088000055555555000880000008800000088000000880000008800055
00000cc000000cc000000cc000000cc000000cc000000cc000000cc000000c555555556000000655555555e000000ee000000ee000000ee000000ee000000e55
00000cc000000cc000000cc000000cc000000cc000000cc000000cc000000c555555550000000055555555555555555555555500000000555555555555555555
00000000000000000000000000000000000000000000000000000000000000555555550000000055555555555555555555555500000000555555555555555555
08000008080000080800000808000008080000080800000808000008080000555555550000000055555555555555555555555500000000555555555555555555
88000008880000088800000888000008880000088800000888000008880000555555550000000055555555555555555555555500000000555555555555555555
08000000080000000800000008000000080000000800000008000000080000555555550000000055555555555555555555555500000000555555555555555555
08000000080000000800000008000000080000000800000008000000080000555555550000000055555555555555555555555500000000555555555555555555
00000000000000000000000000000000000000000000000000000000000000555555550000000055555555555555555555555500000000555555555555555555
00000cc000000cc000000cc000000cc000000cc000000cc000000cc000000c555555550000000055555555555555555555555500000000555555555555555555
00000cc000000cc000000cc000000cc000000cc000000cc000000cc000000c55555555c000000c55555555900000099000000990000009900000099000000955
00000000000000000000000000000000000000000000000000000000000000555555550000000055555555000000000000000000000000000000000000000055
08000008080000080800000808000008080000080800000808000008080000555555550808000055555555008800000088000000880000008800000088000055
88000008880000088800000888000008880000088800000888000008880000555555550888000055555555000800000008000000080000000800000008000055
08000000080000000800000008000000080000000800000008000000080000555555550008000055555555000800000008000000080000000800000008000055
08000000080000000800000008000000080000000800000008000000080000555555550008000055555555008880000088800000888000008880000088800055
00000000000000000000000000000000000000000000000000000000000000555555550000000055555555000000000000000000000000000000000000000055
00000cc000000cc000000cc000000cc000000cc000000cc000000cc000000c55555555c000000c55555555900000099000000990000009900000099000000955
5555555555555555555555555555555555555555555555000000005555555555555555c000000c55555555900000099000000990000009900000099000000955
55555555555555555555555555555555555555555555550000000055555555555555550000000055555555000000000000000000000000000000000000000055
55555555555555555555555555555555555555555555550000000055555555555555550808000055555555008800000088000000880000008800000088000055
55555555555555555555555555555555555555555555550000000055555555555555550888000055555555000800000008000000080000000800000008000055
55555555555555555555555555555555555555555555550000000055555555555555550008000055555555000800000008000000080000000800000008000055
55555555555555555555555555555555555555555555550000000055555555555555550008000055555555008880000088800000888000008880000088800055
55555555555555555555555555555555555555555555550000000055555555555555550000000055555555000000000000000000000000000000000000000055
5555555555555555555555555555555555555555555555000000005555555555555555c000000c55555555900000099000000990000009900000099000000955
0000044000000440000004400000044000000440000004400000044000000455555555c000000c55555555900000099000000990000009900000099000000955
00000000000000000000000000000000000000000000000000000000000000555555550000000055555555000000000000000000000000000000000000000055
88800000888000008880000088800000888000008880000088800000888000555555550808000055555555008800000088000000880000008800000088000055
00800000008000000080000000800000008000000080000000800000008000555555550888000055555555000800000008000000080000000800000008000055
88800000888000008880000088800000888000008880000088800000888000555555550008000055555555000800000008000000080000000800000008000055
80000000800000008000000080000000800000008000000080000000800000555555550008000055555555008880000088800000888000008880000088800055
88800000888000008880000088800000888000008880000088800000888000555555550000000055555555000000000000000000000000000000000000000055
0000044000000440000004400000044000000440000004400000044000000455555555c000000c55555555900000099000000990000009900000099000000955
0000044000000440000004400000044000000440000004400000044000000455555555c000000c55555555900000099000000990000009900000099000000955
00000000000000000000000000000000000000000000000000000000000000555555550000000055555555000000000000000000000000000000000000000055
88800000888000008880000088800000888000008880000088800000888000555555550808000055555555008800000088000000880000008800000088000055
00800000008000000080000000800000008000000080000000800000008000555555550888000055555555000800000008000000080000000800000008000055
88800000888000008880000088800000888000008880000088800000888000555555550008000055555555000800000008000000080000000800000008000055
80000000800000008000000080000000800000008000000080000000800000555555550008000055555555008880000088800000888000008880000088800055
88800000888000008880000088800000888000008880000088800000888000555555550000000055555555000000000000000000000000000000000000000055
0000044000000440000004400000044000000440000004400000044000000455555555c000000c55555555900000099000000990000009900000099000000955
5555555555555555555555555555550000000055555555555555555555555555555555c000000c55555555900000099000000990000009900000099000000955
55555555555555555555555555555500000000555555555555555555555555555555550000000055555555000000000000000000000000000000000000000055
55555555555555555555555555555500000000555555555555555555555555555555550808000055555555008800000088000000880000008800000088000055
55555555555555555555555555555500000000555555555555555555555555555555550888000055555555000800000008000000080000000800000008000055
55555555555555555555555555555500000000555555555555555555555555555555550008000055555555000800000008000000080000000800000008000055
55555555555555555555555555555500000000555555555555555555555555555555550008000055555555008880000088800000888000008880000088800055
55555555555555555555555555555500000000555555555555555555555555555555550000000055555555000000000000000000000000000000000000000055
5555555555555555555555555555550000000055555555555555555555555555555555c000000c55555555900000099000000990000009900000099000000955
0000066000000660000006600000066000000660000006600000066000000655555555c000000c55555555900000099000000990000009900000099000000955
00000000000000000000000000000000000000000000000000000000000000555555550000000055555555000000000000000000000000000000000000000055
88000000880000008800000088000000880000008800000088000000880000555555550808000055555555008800000088000000880000008800000088000055
00800000008000000080000000800000008000000080000000800000008000555555550888000055555555000800000008000000080000000800000008000055
08000000080000000800000008000000080000000800000008000000080000555555550008000055555555000800000008000000080000000800000008000055
00800000008000000080000000800000008000000080000000800000008000555555550008000055555555008880000088800000888000008880000088800055
88000000880000008800000088000000880000008800000088000000880000555555550000000055555555000000000000000000000000000000000000000055
0000066000000660000006600000066000000660000006600000066000000655555555c000000c55555555900000099000000990000009900000099000000955
0000066000000660000006600000066000000660000006600000066000000655555555c000000c55555555900000099000000990000009900000099000000955
00000000000000000000000000000000000000000000000000000000000000555555550000000055555555000000000000000000000000000000000000000055
88000000880000008800000088000000880000008800000088000000880000555555550808000055555555008800000088000000880000008800000088000055
00800000008000000080000000800000008000000080000000800000008000555555550888000055555555000800000008000000080000000800000008000055
08000000080000000800000008000000080000000800000008000000080000555555550008000055555555000800000008000000080000000800000008000055
00800000008000000080000000800000008000000080000000800000008000555555550008000055555555008880000088800000888000008880000088800055
88000000880000008800000088000000880000008800000088000000880000555555550000000055555555000000000000000000000000000000000000000055
0000066000000660000006600000066000000660000006600000066000000655555555c000000c55555555900000099000000990000009900000099000000955
0000066000000660000006600000066000000660000006600000066000000655555555c000000c55555555900000099000000990000009900000099000000955
00000000000000000000000000000000000000000000000000000000000000555555550000000055555555000000000000000000000000000000000000000055
88000000880000008800000088000000880000008800000088000000880000555555550808000055555555008800000088000000880000008800000088000055
00800000008000000080000000800000008000000080000000800000008000555555550888000055555555000800000008000000080000000800000008000055
08000000080000000800000008000000080000000800000008000000080000555555550008000055555555000800000008000000080000000800000008000055
00800000008000000080000000800000008000000080000000800000008000555555550008000055555555008880000088800000888000008880000088800055
88000000880000008800000088000000880000008800000088000000880000555555550000000055555555000000000000000000000000000000000000000055
0000066000000660000006600000066000000660000006600000066000000655555555c000000c55555555900000099000000990000009900000099000000955
0000066000000660000006600000066000000660000006600000066000000600000000c000000c55555555900000099000000990000009900000099000000955
00000000000000000000000000000000000000000000000000000000000000000000000000000055555555000000000000000000000000000000000000000055
88000000880000008800000088000000880000008800000088000000880000000000000808000055555555008800000088000000880000008800000088000055
00800000008000000080000000800000008000000080000000800000008000000000000888000055555555000800000008000000080000000800000008000055
08000000080000000800000008000000080000000800000008000000080000000000000008000055555555000800000008000000080000000800000008000055
00800000008000000080000000800000008000000080000000800000008000000000000008000055555555008880000088800000888000008880000088800055
88000000880000008800000088000000880000008800000088000000880000000000000000000055555555000000000000000000000000000000000000000055
0000066000000660000006600000066000000660000006600000066000000600000000c000000c55555555900000099000000990000009900000099000000955
55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555

__gff__
0001000000000000000300030003000300000000000000000000000300030000000101800101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0101010101011515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0115011515011515151501151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101011515011515011515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0115151515011515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0115151515011515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0115151515011515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101011515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151515151515151515151515151515151515151515151515151515151515151515151515151515050505050505050505050505050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
a20100000a0410a041030210302104001040010400104001030010300100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001
0001000000000030500305000050030500305003050050500a0500e05000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
d0010000001001b15013150131501315013150111500c1500a1500865008650086500465006650056500465001630006300163000620006200161001610016100261002610016100161000600006000060000100
d001000013650136501c750217501d7501b7500b6500b650006000060000600006000060000600006000060000600006000060000600006000060000600006000060000600006000060000600006000060000600
010500001063010120101200a5500a5300c6200c6100c6000c6001060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000200001275016750187501c7501f750167501675016750187501b7501d7501f750227502775027750297502b75030750307502370023700297002a7002b7002c7002d7002d7000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
011000000c543005030050300503246250050000503005030c543005030050300503246250050300503005030c543005030050300503246250050300503005030c54300503005030050324625005030050300503
011000001174511715117451121511244112151174511715117451121511245114151174111715117451141511445114151174511715117451122511445117151174511215112451141511744117151144511715
a31000000c672006020060200602106720060200602006020c672006020060200602106720060200602006020c672006020060200602106720060200602006020c67200602006020060210672006020060200602
091000000c73710737137370c73710737137370c73711737187370c737187370c137187370c737187370c737117371d737117371d737117371d73711737187371b7371b7371b7371b7371b7371b7371b7371b737
__music__
03 10115253

